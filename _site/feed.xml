<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Yongho's Blog</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://yonghochoi.github.io//feed.xml" />
<link rel="alternate" type="text/html" href="http://yonghochoi.github.io/" />
<updated>2016-07-27T14:10:02+09:00</updated>
<id>http://yonghochoi.github.io//</id>
<author>
  <name>YonghoChoi</name>
  <uri>http://yonghochoi.github.io//</uri>
  <email>yongho1037@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[패턴을 활용한 리팩터링]]></title>
 <link rel="alternate" type="text/html" href="http://yonghochoi.github.io//refactoring-to-patterns/" />
  <id>http://yonghochoi.github.io//refactoring-to-patterns</id>
  <published>2016-07-18T20:51:00+09:00</published>
  <updated>2016-07-18T20:51:00+09:00</updated>
  <author>
    <name>YonghoChoi</name>
    <uri>http://yonghochoi.github.io/</uri>
    <email>yongho1037@gmail.com</email>
  </author>
  <content type="html">
    &lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yonghochoi.github.io//composite-1/&quot;&gt;Replace One/Many Distinctions with Composite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;http://yonghochoi.github.io//refactoring-to-patterns/&quot;&gt;패턴을 활용한 리팩터링&lt;/a&gt; was originally published by YonghoChoi at &lt;a href=&quot;http://yonghochoi.github.io/&quot;&gt;Yongho's Blog&lt;/a&gt; on July 18, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Replace One/Many Distinctions with Composite]]></title>
 <link rel="alternate" type="text/html" href="http://yonghochoi.github.io//composite-1/" />
  <id>http://yonghochoi.github.io//composite-1</id>
  <published>2016-07-18T20:51:00+09:00</published>
  <updated>2016-07-18T20:51:00+09:00</updated>
  <author>
    <name>YonghoChoi</name>
    <uri>http://yonghochoi.github.io/</uri>
    <email>yongho1037@gmail.com</email>
  </author>
  <content type="html">
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;어떤 클래스에서 주어진 객체를 처리할 때,
그 객체의 개수에 따라 서로 다른 로직을 사용하고 있다면,
컴포짓을 사용해 객체의 개수에 상관없이 한 로직으로 처리할 수 있도록 만든다.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/YonghoChoi/YonghoChoi.github.io/tree/master/images/refactoring-to-patterns/Composite1.GIF&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 클래스 : ProductRepository&lt;/li&gt;
  &lt;li&gt;주어진 객체 : Spec&lt;/li&gt;
  &lt;li&gt;객체의 개수에 따라 : 단수 / 복수&lt;/li&gt;
  &lt;li&gt;서로 다른 로직 : selectBy(Spec:Spec) / selectBy (Spec:List)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;동기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;코드가 중복된다.
    &lt;ul&gt;
      &lt;li&gt;처리할 객체가 하나 인 경우와 여러 개인 경우의 처리 로직은 기본 적으로 동일한 경우가 많음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트 코드가 복잡해진다.
    &lt;ul&gt;
      &lt;li&gt;처리할 객체 마다 시그니처가 다른 메서드들이 존재하게 됨. 이에 따라 클라이언트도 호출을 다르게 해야 하므로 복잡해짐.&lt;/li&gt;
      &lt;li&gt;클라이언트에서는 객체의 수에 상관 없이 동일한 방법으로 처리하는 것을 선호.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;처리 결과를 취합하기 위해서 추가적인 처리가 필요하다.
    &lt;ul&gt;
      &lt;li&gt;조건이 여러개인 경우 조건에 따른 결과를 합쳐야 한다.&lt;/li&gt;
      &lt;li&gt;아래의 코드는 조건이 여러개 인 경우의 처리 예시 이다. (빨간색이면서 가격이 5달러 이하인 상품 조회)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redProductsUnderFiveDollars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;redProductsUnderFiveDollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;redProductsUnderFiveDollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BelowPriceSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundRedProductsUnderFiveDollars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;productRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redProductsUnderFiveDollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;여기서 추가로 파란색이면서 가격이 10달러 이하인 상품을 찾으려면 두 조건에 대해 각각 검색한 후 그 결과를 합쳐야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundRedProductsUnderFiveDollars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;productRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redProductsUnderFiveDollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundBlueProductsUnderFiveDollars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;productRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blueProductsUnderFiveDollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foundRedProductsUnderFiveDollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foundBludProductsUnderFiveDollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Composite 패턴을 사용하는 경우의 이점.
    &lt;ul&gt;
      &lt;li&gt;코드 중복 제거&lt;/li&gt;
      &lt;li&gt;클라이언트 코드가 간결해짐.&lt;/li&gt;
      &lt;li&gt;클라이언트에서는 조건에 따른 결과 합산과 같은 성가신 작업을 할 필요 없음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주의 사항
    &lt;ul&gt;
      &lt;li&gt;클라이언트의 입장이 별로 중요하지 않고, 코드 중복을 최소화 할 수 있다면 굳이 Composite 패턴을 사용할 필요 없다.&lt;/li&gt;
      &lt;li&gt;Composite 패턴의 단점 가운데 하나는 타입 안전성 문제
        &lt;ul&gt;
          &lt;li&gt;클라이언트가 객체를 추가하려 할 때마다 객체를 확인하는 절차가 포함되어야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/YonghoChoi/YonghoChoi.github.io/tree/master/images/refactoring-to-patterns/Composite2.GIF&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;장점과 단점&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ 중복 코드 제거
+ 객체 하나를 처리하는 방법과 여러개를 처리하는 방법이 하나로 통일
+ 여러 개의 객체를 처리하기 위해 필요한 추가적인 기능 부여 가능 (ex - OR 조건 표현)
- 타입 안전성을 위해 런타임 타입 검사가 필요할 수 있다.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;절차&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;용어 정의
    &lt;ul&gt;
      &lt;li&gt;단수 객체 메서드 : 하나의 객체를 처리하는 메서드&lt;/li&gt;
      &lt;li&gt;복수 객체 메서드 : 여러 개의 객체를 처리하는 메서드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;복수 객체 메서드는 컬렉션을 파라미터로 받음.&lt;/li&gt;
  &lt;li&gt;복수 객체 메서드 내부에서 컬렉션을 다루는 코드에 Extract Method 리팩터링 적용.&lt;/li&gt;
  &lt;li&gt;단수/복수 메서드 간의 차이가 존재한다면 리팩터링을 통해 제거.&lt;/li&gt;
  &lt;li&gt;컴포짓 객체를 파라미터로 하여 단수 객체 메서드를 호출하는 한줄의 코드만을 포함하도록 복수 객체 메서드를 수정.&lt;/li&gt;
  &lt;li&gt;복수 객체 메서드를 Inline Method 리펙터링을 통해 인라인화.&lt;/li&gt;
  &lt;li&gt;컴포짓 클래스에 타입 안전성 체크를 위해 Encapsulate Collection 리팩터링을 적용.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;예제&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;내용 요약 : ProductRepository 객체로부터 원하는 Product 객체의 목록을 얻기 위해 Spec 객체를 사용하는 코드.
    &lt;ul&gt;
      &lt;li&gt;ProductRepository : Product의 리스트를 가짐.&lt;/li&gt;
      &lt;li&gt;Product : 상품 객체&lt;/li&gt;
      &lt;li&gt;Spec : 상품 검색을 위한 조건을 명시.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예제는 TestCase를 사용하여 진행.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;원본 코드 테스트 및 리팩토링&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;먼저 테스트를 위한 임의의 상품 정보를 셋팅한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ProductRepository에 Product 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepositoryTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fireTruck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;f1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fire Truck&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.95f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MEDIUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barbieClassic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b7654&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Barbie Classic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;15.95f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SMALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frisbee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;f4321&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Frisbee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.99f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LARGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b2343&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Baseball&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.95f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOT_APPLICABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toyConvertible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p1112&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Toy Porsche Convertible&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;230.00f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOT_APPLICABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fireTruck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;barbieClassic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frisbee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toyConvertible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;리팩터링 전 코드로 특정 색상의 Product를 찾는 테스트를 수행한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepositoryTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testFindByColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found 2 red products&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found fireTruck&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fireTruck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found Toy Porsche Convertible&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toyConvertible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;selectBy의 구현 내용&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;색상 뿐만이 아닌 복수의 조건을 처리하는 경우 (List 객체 전달)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepositoryTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testFindByColorSizeAndBelowPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SMALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BelowPriceSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;small red products below $10.00&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;List를 사용하는 selectBy의 구현 내용.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;코드를 보면 중복 코드가 다수 존재.&lt;/li&gt;
  &lt;li&gt;Composite 패턴으로 중복을 제거할 수 있지만, 그렇지 않고도 중복은 제거 가능.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;productRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;주어진 상황에 따라 Composite 패턴을 사용할지 말지 결정.&lt;/li&gt;
  &lt;li&gt;현재 selectBy 메서드로는 AND, OR, NOT의 혼합 사용이 불가능.&lt;/li&gt;
  &lt;li&gt;클라이언트 쪽에서는 조건의 종류에 관계없이 하나의 메서드만 사용하는 것이 좋음.&lt;/li&gt;
  &lt;li&gt;그러므로 예제에서는 Composite 패턴으로 리팩터링 하는 것이 더 좋은 경우에 해당.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Composite 패턴 적용&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;복수 객체 메서드로 전달되는 List 객체 보관하는 별도의 클래스 생성.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;selectBy 메서드 내에 List 객체 사용부분을 새로 만든 클래스로 대체.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;정상 동작 테스트
selectBy 메서드 내의 Spec 객체 처리 부분 Extract Method 수행.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;정상 동작 테스트
isSatisfiedBy 메서드를 Move Method 리팩터링을 통해 CompositeSpec 내부로 이동.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSatisfiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;satisfiesAllSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;복수 객체 메서드에서 CompositeSpec 객체를 생성한다는 점을 제외하면 이제 단수, 복수 객체 메서드의 구현이 동일해졌다.&lt;/li&gt;
  &lt;li&gt;단수, 복수 객체 메서드 간 중복 코드 제거&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;CompositeSpec이 현재 Spec을 상속받고 있지 않기 때문에 위 코드에서는 에러가 발생
CompositeSpec 클래스를 Spec의 서브 클래스로 만든다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;정상 동작 테스트 후 selectBy(List specs) 메서드의 코드가 한 줄이므로 Inline Method 리팩터링을 적용해 인라인화.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepositoryTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testFindByColorSizeAndBelowPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SMALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BelowPriceSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*List foundProducts = repository.selectBy(specs);*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Or 또는 Not 조건에 대한 구현에 대한 설명은 Replace Implicit Language with Interpreter 리팩터링으로 미룬다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;타입 안정성 확보&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;CompositeSpec 클래스 내부의 컬렉션 필드에 Encapsulate Collection 리팩터링 적용.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;specs 필드를 빈 List 객체로 초기화&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;조건 추가 시 CompositeSpec의 add 메서드를 사용하도록 수정 (* Generics 사용으로 대체해도 될 듯)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductRepositoryTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testFindByColorSizeAndBelowPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;cm&quot;&gt;/*List specs = new ArrayList();*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SMALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BelowPriceSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*List foundProducts = repository.selectBy(new CompositeSpec(specs));*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기까지의 과정을 마친 후에는 CompositeSpec의 생성자를 호출하는 코드가 없으므로 제거.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/*public CompositeSpec(List specs) {
    	this.specs = specs;
    }*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;CompositeSpec의 getSpecs(…)가 수정이 불가능한 컬렉션을 리턴하도록 수정.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmodifiableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;정상 동작 테스트 후 리팩터링 완료.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/YonghoChoi/YonghoChoi.github.io/tree/master/images/refactoring-to-patterns/Composite3.GIF&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://yonghochoi.github.io//composite-1/&quot;&gt;Replace One/Many Distinctions with Composite&lt;/a&gt; was originally published by YonghoChoi at &lt;a href=&quot;http://yonghochoi.github.io/&quot;&gt;Yongho's Blog&lt;/a&gt; on July 18, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[2015년을 돌아보며..]]></title>
 <link rel="alternate" type="text/html" href="http://yonghochoi.github.io//remind-2015/" />
  <id>http://yonghochoi.github.io//remind-2015</id>
  <published>2016-01-04T00:40:00+09:00</published>
  <updated>2016-01-04T00:40:00+09:00</updated>
  <author>
    <name>YonghoChoi</name>
    <uri>http://yonghochoi.github.io/</uri>
    <email>yongho1037@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;작년에는 놀고 먹은거에 대한 것만 돌아봤던거 같은데 올해는 느낀게 많으므로 개발에 관련된 부분들을 되돌아보고 싶었다. 서른이 된 해이기도 하고, 이직을 한 해이기도 하고, 또 다시 복직을 결심을 하게 된 해이기도 하고.. 참 혼란스러웠던 한 해 였다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2015년에 수행한 프로젝트&lt;/h2&gt;

&lt;h3 id=&quot;for-kakao&quot;&gt;와리가리 삼총사 for kakao&lt;/h3&gt;

&lt;p&gt;와리가리 삼총사는 로이게임즈에서 재직 중에 처음으로 런칭에 성공한 게임으로 2015년 2월에 오픈했다. 처음 접해본 파이썬으로 되어 있었고, 다른 언어에 비교적 진입 장벽이 낮다고 평가되는 언어이긴 했지만 짧은 시간내에 공부해서 런칭까지 경험해 보면서 다른 언어를 배우는 것에 대한 거부감이 상당히 많이 없어졌다. 오히려 다른 언어를 배워보는 것에 재미가 생겼고, 비록 조금 보다가 흐지부지 해지긴 했지만 여러가지를 시도해볼 수 있었다.&lt;/p&gt;

&lt;p&gt;회사 생활에 있어서도 여러가지 추억이 있었는데 야근하며 노래 틀어놓고 다같이 흥얼대면서 코딩하기도 하고, 회의실 바닥에서 우드락 깔고 자는 날이 허다했고, 다른 협력 업체들이랑 싸우기도 하고 돌이켜보면 재밌는 추억이었던 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;클럽 엠스타&lt;/h3&gt;

&lt;p&gt;로이게임즈에서 넷마블 네오로 이직하면서 클럽 엠스타 서버팀으로 들어오게 되었는데 7~8년된 오래된 게임이었다. 유지보수 업무는 처음 맡아보는 것이었기 때문에 입사 당시에는 여러가지 해보고 싶은 것들이 있었다. 우선 로이게임즈에서 보고 배운 것처럼 빌드 배포의 자동화를 구축해 보고 싶었고, 이슈가 되고 있는 기술들 중에 적용해볼 수 있는 것들이 있으면 도입을 해보고 싶었다.&lt;/p&gt;

&lt;p&gt;가장 먼저 했던 일은 컨텐츠 구현과 병행해서 기획팀에서 쉽게 작업을 할 수 있도록 툴을 제공하는 것이었다. 그리고 현재 서버팀에서 서버를 배포하는 일에 스크립트를 사용하고 있었는데 이를 툴로 해결 할 수 있도록 하는 것이 처음 지시받은 작업이었다. 이를 위한 툴이 c++로 이미 개발이 되어 있던 것이 있었는데 유지보수의 어려움이 있어서 이를 참고해서 C#으로 개선했다. 하지만 다른 작업들로 인해 마무리가 흐지부지해져서 퇴사할 때 어느정도 완성해서 배포했다.&lt;/p&gt;

&lt;p&gt;이 후에는 Jenkins를 도입해서 빌드, 배포를 자동화 시켰는데 혼자 작업하기가 버거워서 테스트까지는 추가하지 못했다. Jenkins를 해보면서 여러가지 시행 착오를 거쳤는데 내가 작업하기 제일 편한 방식으로 제 멋대로 해서 잘한 건지는 모르겠다. (빌드는 devenv로 수행하고, 파일 복사나 배포와 같은 작업은 C#으로 프로그램을 구현한 후에 Jenkins에서 수행하도록) 아무튼 빌드가 되는 모습을 보니 뿌듯함을 느끼기도 했다. (처음 해보는 거라..)&lt;/p&gt;

&lt;p&gt;하지만 반년간 이 곳에 있으면서 느낀 것은 내가 하고 싶다고 해서 되는 것은 아니라는 것이었다. 회사 규모가 크기도 하고 현재 라이브 서비스를 진행 중이니 그럴만도 하다. 어쩔 수 없이 다른 것들을 시도도 못해보고 이 틀안에서만 작업을 해야한다고 생각하니까 visual studio를 켜고 코드를 볼 때마다 받는 스트레스가 생각보다 컸다.&lt;/p&gt;

&lt;p&gt;결과적으로는 지금의 나에게는 큰회사보다는 작은 회사에서 서로 신뢰할 수 있는 팀에서 여러가지 경험을 쌓는 것이 더 득일거라는 판단에 이직을 결심하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2015년에 시도해 본 것들&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;영어공부
    &lt;ul&gt;
      &lt;li&gt;출근 시간에 Gramer in use Chapter 1 씩 공부&lt;/li&gt;
      &lt;li&gt;걷는 시간에 Gramer in use 강의 청취&lt;/li&gt;
      &lt;li&gt;출근 후 30분 여유 시간에 kakao english&lt;/li&gt;
      &lt;li&gt;퇴근 후 English for developers 책 하나씩 독해 (중간에 포기)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개발 관련 책 읽기
    &lt;ul&gt;
      &lt;li&gt;비주얼 씽킹&lt;/li&gt;
      &lt;li&gt;몰입! 자바스크립트&lt;/li&gt;
      &lt;li&gt;읽기 좋은 코드가 좋은 코드다.&lt;/li&gt;
      &lt;li&gt;가장 빨리 만나는 Go 언어 (완독 실패)&lt;/li&gt;
      &lt;li&gt;스칼라로 배우는 함수형 프로그래밍 (완독 실패)&lt;/li&gt;
      &lt;li&gt;실용주의 프로그래머 (완독 실패)&lt;/li&gt;
      &lt;li&gt;누워서 읽는 알고리즘 (완독 실패)&lt;/li&gt;
      &lt;li&gt;자바 성능 튜닝 이야기 (읽는 중)&lt;/li&gt;
      &lt;li&gt;JSP 2.3 웹 프로그래밍 (읽는 중)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개발 관련 강의 듣기
    &lt;ul&gt;
      &lt;li&gt;나는 프로그래머다 청취&lt;/li&gt;
      &lt;li&gt;케빈 tv 시청&lt;/li&gt;
      &lt;li&gt;동영상 강의 시청 (생활코딩, 자바)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨퍼런스 / 세미나 다니기
    &lt;ul&gt;
      &lt;li&gt;Deview 2015&lt;/li&gt;
      &lt;li&gt;Gophercon korea 2015&lt;/li&gt;
      &lt;li&gt;Sk Tech Planet 2015&lt;/li&gt;
      &lt;li&gt;나는 프로그래머다 Con 2015&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;웹 개발 배우기 (오프라인 강의)
    &lt;ul&gt;
      &lt;li&gt;CSS&lt;/li&gt;
      &lt;li&gt;Javascript&lt;/li&gt;
      &lt;li&gt;JSP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;홈페이지 만들어보기
    &lt;ul&gt;
      &lt;li&gt;AWS에 서버 올리기&lt;/li&gt;
      &lt;li&gt;Github에 블로그 만들기 (Jekyll 사용)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스터디 모임 참여하기
    &lt;ul&gt;
      &lt;li&gt;영어 스피킹 오프라인 스터디 모임&lt;/li&gt;
      &lt;li&gt;알고리즘 온라인 스터디 모임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;슬라이드 쉐어 공유해보기
    &lt;ul&gt;
      &lt;li&gt;Jenkins 관련 슬라이드 공유&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;2016년에 시도해 볼 것들&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;영어 공부
    &lt;ul&gt;
      &lt;li&gt;2015년에 해 온대로 꾸준히&lt;/li&gt;
      &lt;li&gt;미드 보기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개발 관련 책 10권 이상 읽기
    &lt;ul&gt;
      &lt;li&gt;완독 실패한 책 완독하기&lt;/li&gt;
      &lt;li&gt;자바8 인 액션&lt;/li&gt;
      &lt;li&gt;자바 네트워크 소녀 Netty&lt;/li&gt;
      &lt;li&gt;시작하세요! 엘라스틱 서치&lt;/li&gt;
      &lt;li&gt;패턴을 활용한 리펙터링&lt;/li&gt;
      &lt;li&gt;토비의 스프링&lt;/li&gt;
      &lt;li&gt;차세대 웹 표준 기술 HTML5&lt;/li&gt;
      &lt;li&gt;가장 빨리 만나는 Docker&lt;/li&gt;
      &lt;li&gt;이펙티브 자바&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블로그 포스팅 100개 이상 하기&lt;/li&gt;
  &lt;li&gt;사소한 거라도 Github에 공유해보기&lt;/li&gt;
  &lt;li&gt;오픈 소스 사용해보기
    &lt;ul&gt;
      &lt;li&gt;ELK Stack&lt;/li&gt;
      &lt;li&gt;Jenkins&lt;/li&gt;
      &lt;li&gt;React&lt;/li&gt;
      &lt;li&gt;Bootstrap&lt;/li&gt;
      &lt;li&gt;AngularJS&lt;/li&gt;
      &lt;li&gt;Node.js&lt;/li&gt;
      &lt;li&gt;등등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자바 공부하기 (장기간 디테일하게)&lt;/li&gt;
  &lt;li&gt;솔직해지자
    &lt;ul&gt;
      &lt;li&gt;업무 중 실수에 대한 부분 인정&lt;/li&gt;
      &lt;li&gt;모르는 것 인정&lt;/li&gt;
      &lt;li&gt;다른 사람이 잘한 것 인정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;전문가가 되자
    &lt;ul&gt;
      &lt;li&gt;내가 하는 일에 대한 것 만큼은 전문가가 되도록 노력하자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-4&quot;&gt;돌아보며…&lt;/h2&gt;

&lt;p&gt;2015년은 그 동안 내가 프로그래머로 지내오면서 가지고 있던 마인드와 삶의 패턴이 바뀔 정도로 나에게 큰 영향을 준 해였다. 그렇게 된 이유는 이직 때문이었는데 이직을 한 직장에서 배운 것이 아니라 이 전 직장에서 알게 모르게 많은 것을 배우고 있었구나라는 생각 때문이었다.&lt;/p&gt;

&lt;p&gt;이직을 하고 나니 이곳에는 어떠한 커뮤니케이션이나 개발자끼리의 발전을 위한 노력이 전혀 없었고, 이대로는 도태되겠다라는 생각 때문에 컨퍼런스도 찾아다니고 온/오프라인 커뮤니티를 찾아다니며 자기계발에 노력을 했었다.&lt;/p&gt;

&lt;p&gt;그렇게 혼자 떠돌아다니며 많은 지식들을 얻을 수 있었지만 정리는 되지 않았다. 오히려 너무 많은 정보들과 해야할 것들 때문에 혼란이 왔었고, 이것 저것 손만 대보다가 도중에 흐지부지 되는 상황이 반복되었다. 그래서 남들이 대화하는 내용들을 들으면 알아들을 수는 있어도 깊게 들어가면 전혀 대답할 수 없는 지경이 되다보니 이래선 이도저도 안되겠다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;이직 후 초기에는 회사 내에서도 혼자서 무언가 구축해보고 이것저것해보며 뿌듯함도 느끼고 컨퍼런스를 다니며 배우는 것도 많다고 생각했었지만 4개월 정도 지나자 팀에서 팀원간에 교류나 배울 것이 전혀 없는 상황에서 혼자 고군분투 해봐야 효율도 많이 떨어지고 방향도 제대로 잡지 못해서 스트레스만 받고 있었다. 그 때부터 누군가 방향을 잡아주고 함께 고민해볼 수 있는 팀이 있었으면 좋겠다고 생각했는데 이 전팀이 바로 그랬었다.&lt;/p&gt;

&lt;p&gt;그래서 결국에는 이 전 팀에 복직을 부탁드렸고 다행스럽게도 받아주셔서 2016년부터 다시 함께 일하게 되었다. 비교해보면 이직하고 나서 공부도 더 열심히 하고 운동도 더 열심히 했었다. 하지 않으면 뒤쳐진다는 생각과 나를 도와줄 사람이 없다는 생각 때문에 절실함이 생겼었던 것 같다. 그래서 이런 상황에서 운동도 하지 않으면 스트레스를 너무 받아서 운동도 거의 빠지지 않고 꾸준히 했었다.&lt;/p&gt;

&lt;p&gt;써놓고 보니 문제 투성이 팀에서 나혼자 독립군처럼 싸우고 있는 듯하게 되었는데, 팀은 잘 돌아갔고 회사에서도 수익을 가장 많이 내는 팀이었으므로 팀에 문제는 딱히 없었다. 각자 묵묵히 자신의 업무에 대해 책임지고 수행해내는 식으로 업무를 진행하고 있었고 나는 열심히 물어보고 거기서 배우는 것을 좋아하기 때문에 성향이 맞지 않았다고 생각한다. 그래서 나랑 잘 맞는 팀으로 돌아가려고 하는 것이고..&lt;/p&gt;

&lt;p&gt;아무튼 이제 내일부터 이 전 회사에 복직해서 업무를 시작하는데 팀의 소중함을 깨달은 지금으로서는 앞으로의 회사 생활이 굉장히 기대된다. 여태까지보다 업무량은 훨씬 많아지겠지만 재미있게 일 할 수 있을 것 같다. 회사의 불만은 어딜 가나 생기는 것 같고 이번에도 마찬가지겠지만 2016년에는 거기에 지지말고 하고 싶은 일을 하면서 많은 걸 배울 수 있었으면 좋겠다.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://yonghochoi.github.io//remind-2015/&quot;&gt;2015년을 돌아보며..&lt;/a&gt; was originally published by YonghoChoi at &lt;a href=&quot;http://yonghochoi.github.io/&quot;&gt;Yongho's Blog&lt;/a&gt; on January 04, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[젠킨스 구축 하기 (Windows)]]></title>
 <link rel="alternate" type="text/html" href="http://yonghochoi.github.io//jenkins-setting/" />
  <id>http://yonghochoi.github.io//jenkins-setting</id>
  <published>2015-12-29T23:50:00+09:00</published>
  <updated>2015-12-29T23:50:00+09:00</updated>
  <author>
    <name>YonghoChoi</name>
    <uri>http://yonghochoi.github.io/</uri>
    <email>yongho1037@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Jenkins 홈페이지에서 Window 버젼 다운로드&lt;/li&gt;
  &lt;li&gt;설치가 완료되면 자동으로 localhost:8080 으로 접속됨&lt;/li&gt;
  &lt;li&gt;이 때 8080 port가 사용 중이면 404에러 발생
    &lt;ul&gt;
      &lt;li&gt;Jenkins가 설치된 경로로 이동(C:\Program Files (x86)\Jenkins)해서 Jenkins.xml 파일 수정 (port를 8080이 아닌 다른 값으로 설정)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;웹 페이지가 출력되면 기본 설치는 완료.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;git-&quot;&gt;Git 연동&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Jenkins 관리 -&amp;gt; 플러그인 관리 -&amp;gt; Git 관련 플러그인 설치 (Github을 이용하면 Github 관련 Plugin을, Bitbucket을 이용하면 Bitbucket 관련 Plugin을 설치)
    &lt;ul&gt;
      &lt;li&gt;Git Plugin&lt;/li&gt;
      &lt;li&gt;Github Plugin&lt;/li&gt;
      &lt;li&gt;Bitbucket Oauth Plugin&lt;/li&gt;
      &lt;li&gt;Bitbucket Plugin&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 Item 선택
    &lt;ul&gt;
      &lt;li&gt;Free-stype로 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Git plugin을 사용하려면 몇가지 환경 설정이 필요하다.
    &lt;ul&gt;
      &lt;li&gt;참고 : http://computercamp-cdwilson-us.tumblr.com/post/48589650930/jenkins-git-clone-via-ssh-on-windows-7-x64&lt;/li&gt;
      &lt;li&gt;Jenkins 관리 -&amp;gt; 시스템 구성 -&amp;gt; Git -&amp;gt; Path to Git executable&lt;/li&gt;
      &lt;li&gt;git.exe 연결이 제대로 되어 있지 않아서 빨간 글씨로 오류가 나 있을 것이다.&lt;/li&gt;
      &lt;li&gt;Git이 설치된 경로(C:\Program Files\Git) 에서 bin/git.exe 경로를 입력한다.&lt;/li&gt;
      &lt;li&gt;C:\Program Files\Git\bin\git.exe&lt;/li&gt;
      &lt;li&gt;적용 버튼 클릭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;초기의 Jenkins를 구동시키는 것은 Local System account이지 user 계정이 아니다. Local System account는 SSH key 가지고 있지 않거나 나 known_hosts이 설정되어 있지 않다. 그러므로 git clone을 수행하면 clone에 실패할 것이다.
    &lt;ul&gt;
      &lt;li&gt;이를 해결하기 위해서는 ssh key를 gen 해서 git에 add 해줘야 한다.
        &lt;ul&gt;
          &lt;li&gt;http://knight76.tistory.com/entry/git-Permission-denied-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0&lt;/li&gt;
          &lt;li&gt;https://help.github.com/articles/error-permission-denied-publickey/&lt;/li&gt;
          &lt;li&gt;http://uiandwe.tistory.com/992&lt;/li&gt;
          &lt;li&gt;https://backlogtool.com/git-guide/kr/reference/trouble-shooting.html&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;내 경우에는 설정에 Git 계정과 비밀번호를 등록했더니 해결되었다.
        &lt;ul&gt;
          &lt;li&gt;Jenkins 관리 -&amp;gt; 시스템 설정 -&amp;gt; Git Plugin에 username과 email 입력&lt;/li&gt;
          &lt;li&gt;Jenkins 홈 -&amp;gt; Git 프로젝트 item을 선택 -&amp;gt; 구성 -&amp;gt; 소스코드 관리 -&amp;gt; Git -&amp;gt; Credentials에 계정 Add&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;msbuild-&quot;&gt;MSBuild 설정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Visual Studio 프로젝트를 빌드하기 위해 MSbuild를 사용&lt;/li&gt;
  &lt;li&gt;Jenkins 관리 -&amp;gt; 플러그인 관리 -&amp;gt; MSBuild Plugin 설치 -&amp;gt; Jenkins 재시작&lt;/li&gt;
  &lt;li&gt;Jenkins 관리 -&amp;gt; 시스템 설정 -&amp;gt; MSBuild -&amp;gt; Add MSBuild
    &lt;ul&gt;
      &lt;li&gt;Name : .Net Framework 4.0 (이름은 알아서 지정)&lt;/li&gt;
      &lt;li&gt;Path to MSBuild : C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe (환경에 맞는 MSBuild를 선택)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jenkins 홈 -&amp;gt; Git 프로젝트 item을 선택 -&amp;gt; 구성 -&amp;gt; Build -&amp;gt; Add build step -&amp;gt; Build a visual studio project or solution using MSBuild 선택
    &lt;ul&gt;
      &lt;li&gt;MSBuild Version : 3번에서 지정한 Name 선택&lt;/li&gt;
      &lt;li&gt;MSBuild Build File : 빌드할 솔루션의 경로지정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jenkins 홈 -&amp;gt; 빌드 시작&lt;/li&gt;
  &lt;li&gt;Console Output 을 확인하면 빌드 진행 상황을 체크 할 수 있다.&lt;/li&gt;
  &lt;li&gt;빌드시 프로젝트 설정대로 빌드를 하지 않아 오류가 발생했다.
    &lt;ul&gt;
      &lt;li&gt;MSBuild 수행할때 옵션이 필요
        &lt;ul&gt;
          &lt;li&gt;http://acidpop.tistory.com/118&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;아직 정확한 문제파악이 되지 않아 알아보는 중
        &lt;ul&gt;
          &lt;li&gt;msbuild 관련 슬라이드쉐어 : http://www.slideshare.net/kaistizen/ss-10084687&lt;/li&gt;
          &lt;li&gt;빌드 순서에 대한 문제 해결: http://resisa.tistory.com/104&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;MSBuild 개념 잡기
        &lt;ul&gt;
          &lt;li&gt;http://ccambo.blogspot.kr/2014/02/msbuild-1.html&lt;/li&gt;
          &lt;li&gt;http://megustaria.tistory.com/3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;알게된 정보
        &lt;ul&gt;
          &lt;li&gt;msbuild는 c++ 빌드하기가 까다롭다?
            &lt;ul&gt;
              &lt;li&gt;vcbuild&lt;/li&gt;
              &lt;li&gt;devenv 고려&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;visual studio 2005 프로젝트를 msbuild로 빌드하려면 .Net framework 2.0 버젼으로 해본다&lt;/li&gt;
          &lt;li&gt;현재 프로젝트의 .net framework 버젼을 확인한 후 해당 버젼으로 시도&lt;/li&gt;
          &lt;li&gt;vs2005에서 msbuild 사용하기 : http://stackoverflow.com/questions/832602/msbuild-with-visual-studio-2005&lt;/li&gt;
          &lt;li&gt;DependsOnTargets 속성으로 빌드 순서를 정할 수 있다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;devenv-&quot;&gt;Devenv 사용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MSBuild를 사용해서 MStar 프로젝트를 빌드해보니 Dependency 때문에 빌드가 제대로 되지 않았다. (MSBuild는 프로젝트간 의존성을 무시하고 순서대로 빌드) 그래서 devenv를 사용하는 방법으로 알아보았다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;빌드 커맨드 :  devenv.exe [솔루션 경로] [option]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Example
    &lt;ul&gt;
      &lt;li&gt;“C:\Program Files (x86)\Microsoft Visual Studio 8\Common7\IDE\devenv.com” /INCREMENTAL:NO /useenv “C:\work\jenkins_test\jenkins_test.sln”  /Build “Debug|Win32” /out “C:\buildlog.txt”
(/Build를 수행할 때 Debug 환경에 Win32 플랫폼으로 빌드하고 출력되는 로그는 C:\buildlog.txt에 저장)&lt;/li&gt;
      &lt;li&gt;devenv.exe와 devenv.com으로 명령 수행이 가능한데 devenv.exe는 콘솔 출력이 없고 devenv.com은 콘솔에 출력을 해준다.&lt;/li&gt;
      &lt;li&gt;/out 옵션을 사용하면 인자로 전달되는 경로에 로그가 기록된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;https://msdn.microsoft.com/ko-kr/library/b20w810z.aspx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jenkins-batch-command---&quot;&gt;Jenkins에서 batch command 관리자 권한으로 실행&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;devenv를 이용해서 빌드 시 관리자 권한으로 수행해야 정상적으로 빌드가 되는데 이를 커맨드 상에서 지정하는 방법이 기본적으로는 없고, Jenkins 서비스 자체를 관리자 권한으로 시작하는 방법을 사용해야 한다.
    &lt;ul&gt;
      &lt;li&gt;서비스 -&amp;gt; Jenkins 에서 속성으로 진입 -&amp;gt; 로그온 -&amp;gt; 계정 지정 -&amp;gt; 관리자 지정&lt;/li&gt;
      &lt;li&gt;Jenkins 서비스 재시작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;http://stackoverflow.com/questions/27413261/run-batch-file-as-administrator-on-jenkins&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;빌드 시 매개변수 설정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Jenkins Item의 구성에 들어가서 “이 빌드는 매개변수가 있습니다.”에 체크한다.&lt;/li&gt;
  &lt;li&gt;상황에 맞는 매개변수를 선택한 후 값을 지정한다.&lt;/li&gt;
  &lt;li&gt;build 명령에서 매개변수 이름 앞뒤에 %를 붙이면 빌드 시 해당 매개변수의 값으로 치환된다.
    &lt;ul&gt;
      &lt;li&gt;ex) 매개변수명 : Command -&amp;gt; %Command%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;이슈 해결&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Windows Batch command를 이용해서 프로그램을 실행 시킬 때 코드 내에 “Environment.CurrentDirectory”를 이용하거나 “Directory.GetCurrentDirectory()”를 사용해서 경로를 가지고 오는 경우 프로젝트의 작업 디렉토리가 아닌 파일을 실행시킨 위치를 가져오므로 잘못된 위치를 가리킬 수 있다. 프로젝트의 작업 디렉토리를 가져오기 위해서는 “AppDomain.CurrentDomain.BaseDirectory”를 사용한다.&lt;/li&gt;
  &lt;li&gt;젠킨스를 이용해서 다른 피씨에 배포를 하는 경우 경로를 찾지 못하는 문제가 발생했다. 로컬에서는 정상 동작하는데 외부 피씨로 배포하는 경우에만 자꾸 경로를 찾지 못해서 한참을 헤매던 중 젠킨스로 실행 될 때 실행하는 사용자 계정을 찍어보니 AUTHORITY\SYSTEM 이었다. 이는 젠킨스 서비스의 설정이 로컬 시스템 계정으로 되어있기 때문이었는데 원격 피씨의 공유 폴더에 이 계정에 대한 권한이 없어서 였다. 그래서 공유폴더에 권한을 가지고 있는 계정으로 지정해서 서비스를 재시작하니 해결되었다.&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://yonghochoi.github.io//jenkins-setting/&quot;&gt;젠킨스 구축 하기 (Windows)&lt;/a&gt; was originally published by YonghoChoi at &lt;a href=&quot;http://yonghochoi.github.io/&quot;&gt;Yongho's Blog&lt;/a&gt; on December 29, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[웹 페이지에 소셜 플러그인 추가하기]]></title>
 <link rel="alternate" type="text/html" href="http://yonghochoi.github.io//add-social-plugin/" />
  <id>http://yonghochoi.github.io//add-social-plugin</id>
  <published>2015-12-26T00:32:00+09:00</published>
  <updated>2015-12-26T00:32:00+09:00</updated>
  <author>
    <name>YonghoChoi</name>
    <uri>http://yonghochoi.github.io/</uri>
    <email>yongho1037@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;section&quot;&gt;웹페이지에 소셜 공유 링크 추가하기&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/+/web/share/&quot;&gt;구글&lt;/a&gt;이나 &lt;a href=&quot;https://about.twitter.com/ko/resources/buttons&quot;&gt;트위터&lt;/a&gt;, &lt;a href=&quot;https://developers.facebook.com/docs/plugins?locale=ko_KR#like-share-send&quot;&gt;페이스북&lt;/a&gt;에서는 트윗하기, 좋아요 버튼에 대한 API를 제공한다. 코드까지 제공해주기 때문에 API 제공 페이지에서 복사해서 간단하게 사용할 수가 있다.&lt;/p&gt;

&lt;p&gt;구글과 페이스북은 현재 페이지의 URL을 알아서 링크해주기 때문에 문제가 되지 않았는데 페이스북 API의 경우에는 현재 페이지의 URL을 직접 넣어주어야 했다. 그래서 이 부분을 동적으로 생성해주어야 하는데 Jekyll을 이용해서 간단하게 해결할 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll---url-&quot;&gt;Jekyll로 현재 페이지 URL 만들기&lt;/h2&gt;

&lt;p&gt;Jekyll 홈페이지를 참고해서 현재 페이지의 URL을 얻어 올 수 있는 Variable이 page와 site라는 것을 알 수 있었다. page는 단어 그대로 현재 페이지에 대한 정보를 담고 있고 site에는 이 홈페이지에 대한 정보가 담겨져 있다. 그래서 page를 통해 URI를 얻어 올 수 있고, site를 통해 이 사이트의 주소를 알수가 있어서 조합하면 현재 페이지의 주소를 알아낼 수가 있다.&lt;/p&gt;
&lt;pre&gt;
 href=&quot;http://yonghochoi.github.io//add-social-plugin/&quot;
 &lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;http://yonghochoi.github.io//add-social-plugin/&quot;&gt;웹 페이지에 소셜 플러그인 추가하기&lt;/a&gt; was originally published by YonghoChoi at &lt;a href=&quot;http://yonghochoi.github.io/&quot;&gt;Yongho's Blog&lt;/a&gt; on December 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Jekyll을 사용하여 Github에 블로그 만들기]]></title>
 <link rel="alternate" type="text/html" href="http://yonghochoi.github.io//try-github-pages/" />
  <id>http://yonghochoi.github.io//try-github-pages</id>
  <published>2015-12-23T16:44:00+09:00</published>
  <updated>2015-12-23T16:44:00+09:00</updated>
  <author>
    <name>YonghoChoi</name>
    <uri>http://yonghochoi.github.io/</uri>
    <email>yongho1037@gmail.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;Github에서 page automatic generator 기능을 통해 간편하게 블로그 페이지를 작성할 수 있도록 제공한다. 이를 이용해서 깔끔하고 본인 취향에 맞는 블로그를 개설할 수가 있다. &lt;br /&gt; 관련 내용은 &lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot;&gt;Github의 설명 페이지&lt;/a&gt;를 참고해서 제작했다. 설명에 따르면 이 블로그 페이지는 공개적인 페이지라서 패스워드나 개인정보를 Repository에 저장하면 안된다고 경고한다. 심지어 repository가 private라도 이 블로그를 통해 공개될 수 있으므로 주의해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;github-repository-&quot;&gt;Github에 Repository 생성&lt;/h2&gt;

&lt;p&gt;시작은 간단하게 “블로그명.github.io” 형태로 repository를 생성한다. 그 다음 이 repository의 settings로 들어간 후 Launch automatic generator를 선택하여 블로그 템플릿을 지정하면 해당 템플릿이 적용된 index.html 파일이 생성된다.&lt;/p&gt;

&lt;p&gt;그 이후부터는 repository를 clone 해서 작업한 후 github에 변경 내용을 반영하는 식으로 발전시켜 나가면 된다.&lt;/p&gt;

&lt;p&gt;Github page는 Jekyll을 지원하는데 모든 페이지에 복사할 필요 없이 쉽게 헤더와 푸터를 만들어준다.  repository 내의 특별한 이름을 가진 branch에 push를 할 때 Jekyll이 동작한다. User 페이지를 제작하는 경우에는 master를 사용하면 되고, ProjectPage일 경우에는 gh-pages라는 branch를 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-&quot;&gt;로컬에 &lt;a href=&quot;http://jekyllrb.com/docs/posts/&quot;&gt;Jekyll&lt;/a&gt; 설치&lt;/h2&gt;

&lt;p&gt;Github에서는 문제를 사전에 발견하는데 도움을 줄 수 있도록 로컬에 Jekyll을 설치하길 강력히 권장하고 있다.&lt;/p&gt;

&lt;p&gt;Jekyll은 윈도우에서 공식적으로 지원하지는 않는다. 윈도우에 설치 하려면 &lt;a href=&quot;http://jekyll-windows.juthilo.com&quot;&gt;Jekyll Windows 설치 가이드&lt;/a&gt;를 참고한다. 가이드 순서대로 진행하면 Ruby와 Jekyll을 설치하게 되는데 Ruby는 최소한 2.0.0 이상의 버젼이어야 한다.&lt;/p&gt;

&lt;p&gt;설치 완료 후 추가로 필요한 package들을 설치 한다.&lt;/p&gt;
&lt;pre&gt;
  gem install github-pages
  gem install bundler

  github-pages versions
  &lt;/pre&gt;

&lt;p&gt;bundler는 루비 프로젝트를 위한 일관된 환경을 제공(gem들과 dependency 관리)해준다. 이제 Jekyll을 사용하여 간단하게 웹 페이지를 만들어볼 수 있다.&lt;/p&gt;
&lt;pre&gt;
  jekyll new myblog
  cd myblog
  jekyll serve
  &lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll new myblog : myblog라는 이름으로 파일 생성&lt;/li&gt;
  &lt;li&gt;jekyll serve : 페이지가 있는 디렉토리에서 명령을 수행하면 서버가 작동한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bundle을 사용하여 dependency를 관리하려면 Gemfile이 필요하므로 repository root에 Gemfile을 작성해준다.&lt;/p&gt;
&lt;pre&gt;
  source &#39;https://rubygems.org&#39;
  gem &#39;github-pages&#39;
  &lt;/pre&gt;

&lt;p&gt;bundle install 명령을 수행하면 dependency들이 설치된다.&lt;/p&gt;
&lt;pre&gt;
  bundle install
  &lt;/pre&gt;

&lt;p&gt;Github 페이지에서 Gemfile이 동작하도록 하려면 GIthub 에 push를 해준다. (bundle install 후 생성되는 Github.lock 파일과 함께 push) 이제 bundle exec jekyll serve 명령으로 서버를 구동시킬 수가 있는데 python이 설치되어 있지 않으면 liquid exception 이 발생한다. 파이썬 3.x 버젼으로 설치 후 수행하면 4000번 port로 서버가 구동된다.&lt;/p&gt;
&lt;pre&gt;
  bundle exec jekyll serve
  &lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;위에서 처럼 bundle exec 를 사용하지 않고도 jekyll serve 명령만으로도 수행이 가능한데 gem을 실행 시킬 때 bundle을 사용하지 않으면 잘 작동하는 것 처럼 보이지만 그렇지 않을 수도 있다고 경고한다. dependency 때문에 프로그램이 괴로워할 수도 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dependency가 bundler를 통해 관리되고 있으므로 연관된 모듈들이 업데이트 되더라도 bundle update 명령을 통해 쉽게 최신 버젼으로 유지할 수가 있다.&lt;/p&gt;
&lt;pre&gt;
  bundle update
  gem update github-pages (opt)
  &lt;/pre&gt;

&lt;p&gt;Jekyll은 대부분의 설정을 _config.yml 파일을 통해 설정한다.&lt;/p&gt;

&lt;h2 id=&quot;posts-&quot;&gt;_posts 폴더&lt;/h2&gt;

&lt;p&gt;블로그 포스트들이 존재하는 폴더이고, Markdown 이나 HTML 문서가 될 수 있다. 모든 포스트들은 YAML Front Matter(페이지 최상단에 “—”으로 시작하는 코드)를 포함해야 정상적으로 동작한다.&lt;/p&gt;

&lt;p&gt;_posts 폴더에 파일을 추가 할 때는 파일 이름이 중요한데 Jekyll는 아래의 형식을 따를 것을 요구한다.&lt;/p&gt;
&lt;pre&gt;
  YEAR-MONTH-DAY-title.MARKUP
  ex) 2015-12-23-first-page.md/html
  &lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;http://yonghochoi.github.io//try-github-pages/&quot;&gt;Jekyll을 사용하여 Github에 블로그 만들기&lt;/a&gt; was originally published by YonghoChoi at &lt;a href=&quot;http://yonghochoi.github.io/&quot;&gt;Yongho's Blog&lt;/a&gt; on December 23, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[블로그 생성!]]></title>
 <link rel="alternate" type="text/html" href="http://yonghochoi.github.io//create-blog/" />
  <id>http://yonghochoi.github.io//create-blog</id>
  <published>2015-12-23T12:23:00+09:00</published>
  <updated>2015-12-23T12:23:00+09:00</updated>
  <author>
    <name>YonghoChoi</name>
    <uri>http://yonghochoi.github.io/</uri>
    <email>yongho1037@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;웹 공부를 하면서 다른 사람들이 Github에 블로그를 제작하는 것을 보고
나도 한번 만들어보고 싶은 생각이 들었었다.&lt;/p&gt;

&lt;p&gt;생각난 김에 시도를 해봤는데 생소한 방식이라 시간이 생각보다 많이 걸린 것 같다.
&lt;a href=&quot;https://help.github.com/categories/github-pages-basics&quot;&gt;Github pages&lt;/a&gt; 를 참고해서 안되는 영어 실력으로 천천히 따라해봤는데 나름 재미가 있었다.
&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; 문법이나 &lt;a href=&quot;http://rubyonrails.org&quot;&gt;루비&lt;/a&gt;는 전혀 몰라서 이것도 천천히 해석해가며 발전시켜가 봐야겠다.&lt;/p&gt;

&lt;p&gt;이전 블로그 : &lt;a href=&quot;http://yongho1037.tistory.com&quot;&gt;Yongho tistory blog&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://yonghochoi.github.io//create-blog/&quot;&gt;블로그 생성!&lt;/a&gt; was originally published by YonghoChoi at &lt;a href=&quot;http://yonghochoi.github.io/&quot;&gt;Yongho's Blog&lt;/a&gt; on December 23, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
